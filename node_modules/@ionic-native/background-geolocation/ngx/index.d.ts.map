{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport declare enum BackgroundGeolocationLocationCode {\n    PERMISSION_DENIED = 1,\n    LOCATION_UNAVAILABLE = 2,\n    TIMEOUT = 3\n}\nexport declare enum BackgroundGeolocationNativeProvider {\n    gps = \"gps\",\n    network = \"network\",\n    passive = \"passive\",\n    fused = \"fused\"\n}\nexport declare enum BackgroundGeolocationLocationProvider {\n    DISTANCE_FILTER_PROVIDER = 0,\n    ACTIVITY_PROVIDER = 1,\n    RAW_PROVIDER = 2\n}\nexport declare enum BackgroundGeolocationEvents {\n    http_authorization = \"http_authorization\",\n    abort_requested = \"abort_requested\",\n    background = \"background\",\n    foreground = \"foreground\",\n    authorization = \"authorization\",\n    error = \"error\",\n    stop = \"stop\",\n    start = \"start\",\n    activity = \"activity\",\n    stationary = \"stationary\",\n    location = \"location\"\n}\nexport declare enum BackgroundGeolocationAuthorizationStatus {\n    NOT_AUTHORIZED = 0,\n    AUTHORIZED = 1,\n    AUTHORIZED_FOREGROUND = 2\n}\nexport declare enum BackgroundGeolocationLogLevel {\n    TRACE = \"TRACE\",\n    DEBUG = \"DEBUG\",\n    INFO = \"INFO\",\n    WARN = \"WARN\",\n    ERROR = \"ERROR\"\n}\nexport interface BackgroundGeolocationLogEntry {\n    /** ID of log entry as stored in db. */\n    id: number;\n    /** Timestamp in milliseconds since beginning of UNIX epoch. */\n    timestamp: number;\n    /** Log level */\n    level: BackgroundGeolocationLogLevel;\n    /** Log message */\n    message: string;\n    /** Recorded stacktrace. (Android only, on iOS part of message) */\n    stackTrace: string;\n}\nexport interface ServiceStatus {\n    /** TRUE if service is running. */\n    isRunning: boolean;\n    /** TRUE if location services are enabled */\n    locationServicesEnabled: boolean;\n    /**\n     * Authorization status.\n     *\n     * Posible values:\n     *  NOT_AUTHORIZED, AUTHORIZED, AUTHORIZED_FOREGROUND\n     *\n     * @example\n     * if (authorization == BackgroundGeolocation.NOT_AUTHORIZED) {...}\n     */\n    authorization: BackgroundGeolocationAuthorizationStatus;\n}\nexport interface BackgroundGeolocation {\n    code: BackgroundGeolocationLocationCode;\n    message: string;\n}\nexport interface BackgroundGeolocationCurrentPositionConfig {\n    timeout: number;\n    maximumAge: number;\n    enableHighAccuracy: boolean;\n}\nexport interface BackgroundGeolocationResponse {\n    /** ID of location as stored in DB (or null) */\n    id: number;\n    /**\n     * Native provider reponsible for location.\n     *\n     * Possible values:\n     * \"gps\", \"network\", \"passive\" or \"fused\"\n     */\n    provider: BackgroundGeolocationNativeProvider;\n    /** Configured location provider. */\n    locationProvider: BackgroundGeolocationLocationProvider;\n    /** UTC time of this fix, in milliseconds since January 1, 1970. */\n    time: number;\n    /** Latitude, in degrees. */\n    latitude: number;\n    /** Longitude, in degrees. */\n    longitude: number;\n    /** Estimated accuracy of this location, in meters. */\n    accuracy: number;\n    /**\n     * Speed if it is available, in meters/second over ground.\n     *\n     * Note: Not all providers are capable of providing speed.\n     * Typically network providers are not able to do so.\n     */\n    speed: number;\n    /** Altitude if available, in meters above the WGS 84 reference ellipsoid. */\n    altitude: number;\n    /** Bearing, in degrees. */\n    bearing: number;\n    /**\n     * True if location was recorded by mock provider. (ANDROID ONLY)\n     *\n     * Note: this property is not enabled by default!\n     * You can enable it \"postTemplate\" configure option.\n     */\n    isFromMockProvider?: boolean;\n    /**\n     * True if device has mock locations enabled. (ANDROID ONLY)\n     *\n     * Note: this property is not enabled by default!\n     * You can enable it \"postTemplate\" configure option.\n     */\n    mockLocationsEnabled?: boolean;\n}\nexport interface BackgroundGeolocationConfig {\n    /**\n     * Set location provider\n     *\n     * Platform: all\n     * Available providers:\n     *  DISTANCE_FILTER_PROVIDER,\n     *  ACTIVITY_PROVIDER\n     *  RAW_PROVIDER\n     *\n     * @default DISTANCE_FILTER_PROVIDER\n     * @example\n     * { locationProvider: LocationProvider.RAW_PROVIDER }\n     */\n    locationProvider?: number;\n    /**\n     * Desired accuracy in meters.\n     *\n     * Platform: all\n     * Provider: all\n     * Possible values:\n     *  HIGH_ACCURACY,\n     *  MEDIUM_ACCURACY,\n     *  LOW_ACCURACY,\n     *  PASSIVE_ACCURACY\n     * Note: Accuracy has direct effect on power drain. Lower accuracy = lower power drain.\n     *\n     * @default MEDIUM_ACCURACY\n     * @example\n     * { desiredAccuracy: BackgroundGeolocationAccuracy.LOW }\n     */\n    desiredAccuracy?: number;\n    /**\n     * Stationary radius in meters.\n     *\n     * When stopped, the minimum distance the device must move beyond the stationary location for aggressive background-tracking to engage.\n     * Platform: all\n     * Provider: DISTANCE_FILTER\n     *\n     * @default 50\n     */\n    stationaryRadius?: number;\n    /**\n     * When enabled, the plugin will emit sounds for life-cycle events of background-geolocation! See debugging sounds table.\n     *\n     * Platform: all\n     * Provider: all\n     *\n     * @default false\n     */\n    debug?: boolean;\n    /**\n     * The minimum distance (measured in meters) a device must move horizontally before an update event is generated.\n     *\n     * Platform: all\n     * Provider: DISTANCE_FILTER, RAW\n     *\n     * @default 500\n     * @see {@link https://apple.co/2oHo2CV|Apple docs}\n     */\n    distanceFilter?: number;\n    /**\n     * Enable this in order to force a stop() when the application terminated.\n     * E.g. on iOS, double-tap home button, swipe away the app.\n     *\n     * Platform: all\n     * Provider: all\n     *\n     * @default true\n     */\n    stopOnTerminate?: boolean;\n    /**\n     * Start background service on device boot.\n     *\n     * Platform: Android\n     * Provider: all\n     *\n     * @default false\n     */\n    startOnBoot?: boolean;\n    /**\n     * The minimum time interval between location updates in milliseconds.\n     *\n     * Platform: Android\n     * Provider: all\n     *\n     * @default 60000\n     * @see {@link https://bit.ly/1x00RUu|Android docs}\n     */\n    interval?: number;\n    /**\n     * Fastest rate in milliseconds at which your app can handle location updates.\n     *\n     * Platform: Android\n     * Provider: ACTIVITY\n     *\n     * @default 120000\n     * @see {@link https://bit.ly/1x00RUu|Android docs}\n     */\n    fastestInterval?: number;\n    /**\n     * Rate in milliseconds at which activity recognition occurs.\n     * Larger values will result in fewer activity detections while improving battery life.\n     *\n     * Platform: Android\n     * Provider: ACTIVITY\n     *\n     * @default 10000\n     */\n    activitiesInterval?: number;\n    /**\n     * @deprecated Stop location updates, when the STILL activity is detected.\n     */\n    stopOnStillActivity?: boolean;\n    /**\n     * Enable/disable local notifications when tracking and syncing locations.\n     *\n     * Platform: Android\n     * Provider: all\n     *\n     * @default true\n     */\n    notificationsEnabled?: boolean;\n    /**\n     * Allow location sync service to run in foreground state.\n     * Foreground state also requires a notification to be presented to the user.\n     *\n     * Platform: Android\n     * Provider: all\n     *\n     * @default false\n     */\n    startForeground?: boolean;\n    /**\n     * Custom notification title in the drawer.\n     *\n     * Platform: Android\n     * Provider: all\n     * @default \"Background tracking\"\n     */\n    notificationTitle?: string;\n    /**\n     * Custom notification text in the drawer.\n     *\n     * Platform: Android\n     * Provider: all\n     *\n     * @default \"ENABLED\"\n     */\n    notificationText?: string;\n    /**\n     * The accent color (hex triplet) to use for notification.\n     * Eg. <code>#4CAF50</code>.\n     *\n     * Platform: Android\n     * Provider: all\n     */\n    notificationIconColor?: string;\n    /**\n     * The filename of a custom notification icon.\n     *\n     * Platform: Android\n     * Provider: all\n     */\n    notificationIconLarge?: string;\n    /**\n     * The filename of a custom notification icon.\n     *\n     * Platform: Android\n     * Provider: all\n     */\n    notificationIconSmall?: string;\n    /**\n     * Activity type.\n     * Presumably, this affects iOS GPS algorithm.\n     *\n     * Possible values:\n     * \"AutomotiveNavigation\", \"OtherNavigation\", \"Fitness\", \"Other\"\n     *\n     * Platform: iOS\n     * Provider: all\n     *\n     * @default \"OtherNavigation\"\n     * @see {@link https://apple.co/2oHofpH|Apple docs}\n     */\n    activityType?: string;\n    /**\n     * Pauses location updates when app is paused.\n     *\n     * Platform: iOS\n     * Provider: all\n     *\n     * @default false\n     * @see {@link https://apple.co/2CbjEW2|Apple docs}\n     */\n    pauseLocationUpdates?: boolean;\n    /**\n     * Switch to less accurate significant changes and region monitory when in background.\n     *\n     * Platform: iOS\n     * Provider: all\n     *\n     * @default false\n     */\n    saveBatteryOnBackground?: boolean;\n    /**\n     * Server url where to send HTTP POST with recorded locations\n     *\n     * Platform: all\n     * Provider: all\n     */\n    url?: string;\n    /**\n     * Server url where to send fail to post locations\n     *\n     * Platform: all\n     * Provider: all\n     */\n    syncUrl?: string;\n    /**\n     * Specifies how many previously failed locations will be sent to server at once.\n     *\n     * Platform: all\n     * Provider: all\n     *\n     * @default 100\n     */\n    syncThreshold?: number;\n    /**\n     * Optional HTTP headers sent along in HTTP request.\n     *\n     * Platform: all\n     * Provider: all\n     */\n    httpHeaders?: any;\n    /**\n     * Limit maximum number of locations stored into db.\n     *\n     * Platform: all\n     * Provider: all\n     *\n     * @default 10000\n     */\n    maxLocations?: number;\n    /**\n     * Customization post template.\n     *\n     * Platform: all\n     * Provider: all\n     */\n    postTemplate?: any;\n}\n/**\n * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\n *\n * Possible values:\n *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n *  ANDROID_ACTIVITY_PROVIDER: 1\n *\n * @enum {number}\n */\nexport declare enum BackgroundGeolocationProvider {\n    ANDROID_DISTANCE_FILTER_PROVIDER = 0,\n    ANDROID_ACTIVITY_PROVIDER = 1\n}\n/**\n * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\n * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\n * 1000 results in lowest power drain and least accurate readings.\n *\n * Possible values:\n *  HIGH: 0\n *  MEDIUM: 10\n *  LOW: 100\n *  PASSIVE: 1000\n *\n * enum {number}\n */\nexport declare enum BackgroundGeolocationAccuracy {\n    HIGH = 0,\n    MEDIUM = 10,\n    LOW = 100,\n    PASSIVE = 1000\n}\n/**\n * Used in the switchMode function\n *\n * Possible values:\n *  BACKGROUND: 0\n *  FOREGROUND: 1\n *\n * @enum {number}\n */\nexport declare enum BackgroundGeolocationMode {\n    BACKGROUND = 0,\n    FOREGROUND = 1\n}\nexport declare enum BackgroundGeolocationIOSActivity {\n    AutomotiveNavigation = \"AutomotiveNavigation\",\n    OtherNavigation = \"OtherNavigation\",\n    Fitness = \"Fitness\",\n    Other = \"Other\"\n}\n/**\n * @name Background Geolocation\n * @description\n * This plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\n * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\n *\n * @usage\n *\n * BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n *\n * ```typescript\n * import { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationEvents, BackgroundGeolocationResponse } from '@ionic-native/background-geolocation/ngx';\n *\n * constructor(private backgroundGeolocation: BackgroundGeolocation) { }\n *\n * ...\n *\n * const config: BackgroundGeolocationConfig = {\n *             desiredAccuracy: 10,\n *             stationaryRadius: 20,\n *             distanceFilter: 30,\n *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n *     };\n *\n * this.backgroundGeolocation.configure(config)\n *   .then(() => {\n *\n *     this.backgroundGeolocation.on(BackgroundGeolocationEvents.location).subscribe((location: BackgroundGeolocationResponse) => {\n *       console.log(location);\n *\n *       // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n *       // and the background-task may be completed.  You must do this regardless if your operations are successful or not.\n *       // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n *       this.backgroundGeolocation.finish(); // FOR IOS ONLY\n *     });\n *\n *   });\n *\n * // start recording location\n * this.backgroundGeolocation.start();\n *\n * // If you wish to turn OFF background-tracking, call the #stop method.\n * this.backgroundGeolocation.stop();\n *\n * ```\n * @interfaces\n * BackgroundGeolocationResponse\n * BackgroundGeolocationConfig\n */\nexport declare class BackgroundGeolocation extends IonicNativePlugin {\n    /**\n     * Configure the plugin.\n     *\n     * @param options {BackgroundGeolocationConfig} options An object of type Config\n     * @return {Promise<any>}\n     */\n    configure(options: BackgroundGeolocationConfig): Promise<any>;\n    /**\n     * Turn ON the background-geolocation system.\n     * The user will be tracked whenever they suspend the app.\n     * @returns {Promise<any>}\n     */\n    start(): Promise<any>;\n    /**\n     * Turn OFF background-tracking\n     * @returns {Promise<any>}\n     */\n    stop(): Promise<any>;\n    /**\n     * Inform the native plugin that you're finished, the background-task may be completed\n     * @returns {Promise<any>}\n     */\n    finish(): Promise<any>;\n    /**\n     * Force the plugin to enter \"moving\" or \"stationary\" state\n     * @param isMoving {boolean}\n     * @returns {Promise<any>}\n     */\n    changePace(isMoving: boolean): Promise<any>;\n    /**\n     * Setup configuration\n     * @param options {BackgroundGeolocationConfig}\n     * @returns {Promise<any>}\n     */\n    setConfig(options: BackgroundGeolocationConfig): Promise<any>;\n    /**\n     * Returns current stationaryLocation if available. null if not\n     * @returns {Promise<Location>}\n     */\n    getStationaryLocation(): Promise<BackgroundGeolocationResponse>;\n    /**\n     * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\n     * your #success callback will be executed with #location param containing #radius of region\n     * @returns {Promise<any>}\n     */\n    onStationary(): Promise<any>;\n    /**\n     * Check if location is enabled on the device\n     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\n     */\n    isLocationEnabled(): Promise<number>;\n    /**\n     * Display app settings to change permissions\n     */\n    showAppSettings(): void;\n    /**\n     * Display device location settings\n     */\n    showLocationSettings(): void;\n    /**\n     * Method can be used to detect user changes in location services settings.\n     * If user enable or disable location services then success callback will be executed.\n     * In case or  (SettingNotFoundException) fail callback will be executed.\n     * @returns {Observable<number>}\n     */\n    watchLocationMode(): Observable<number>;\n    /**\n     * Stop watching for location mode changes.\n     * @returns {Promise<any>}\n     */\n    stopWatchingLocationMode(): Promise<any>;\n    /**\n     * Method will return all stored locations.\n     * Locations are stored when:\n     *  - config.stopOnTerminate is false and main activity was killed\n     *    by the system\n     *  or\n     *  - option.debug is true\n     * @returns {Promise<any>}\n     */\n    getLocations(): Promise<any>;\n    /**\n     * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\n     * @returns {Promise<any>}\n     */\n    getValidLocations(): Promise<any>;\n    /**\n     * Delete stored location by given locationId.\n     * @param locationId {number}\n     * @returns {Promise<any>}\n     */\n    deleteLocation(locationId: number): Promise<any>;\n    /**\n     * Delete all stored locations.\n     * @returns {Promise<any>}\n     */\n    deleteAllLocations(): Promise<any>;\n    /**\n     * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\n     * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\n     *\n     * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\n     * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\n     *\n     * BackgroundGeolocation.Mode.FOREGROUND\n     * BackgroundGeolocation.Mode.BACKGROUND\n     *\n     * @param modeId {number}\n     * @returns {Promise<any>}\n     */\n    switchMode(modeId: number): Promise<any>;\n    /**\n     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n     *\n     * @param limit {number} Limits the number of entries\n     * @returns {Promise<any>}\n     */\n    getLogEntries(limit: number, fromId: number, minLevel: BackgroundGeolocationLogLevel): Promise<BackgroundGeolocationLogEntry[]>;\n    /**\n     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n     *\n     * @returns {Promise<any>}\n     */\n    getConfig(): Promise<any>;\n    /**\n     * One time location check to get current location of the device.\n     * {timeout: Maximum time in milliseconds device will wait for location,\n     * maximumAge: Maximum age in milliseconds of a possible cached location that is acceptable to return;\n     * enableHighAccuracy: if true and if the device is able to provide a more accurate position, it will do so}\n     *\n     * @param {BackgroundGeolocationCurrentPositionConfig} options\n     * @returns {Promise<any>}\n     */\n    getCurrentLocation(options?: BackgroundGeolocationCurrentPositionConfig): Promise<BackgroundGeolocationResponse>;\n    /**\n     * Check status of the service\n     */\n    checkStatus(): Promise<ServiceStatus>;\n    /**\n     * Start background task (iOS only)\n     *\n     * To perform any long running operation on iOS\n     * you need to create background task\n     * IMPORTANT: task has to be ended by endTask\n     *\n     * @returns {Promise<number>} taskKey\n     */\n    startTask(): Promise<number>;\n    /**\n     *  End background task indentified by taskKey (iOS only)\n     */\n    endTask(taskKey: number): Promise<any>;\n    /**\n     * A special task that gets executed when the app is terminated, but\n     * the plugin was configured to continue running in the background\n     * (option <code>stopOnTerminate: false</code>).\n     *\n     * In this scenario the Activity was killed by the system and all registered\n     * event listeners will not be triggered until the app is relaunched.\n     *\n     * @example\n     *  BackgroundGeolocation.headlessTask(function(event) {\n     *\n     *      if (event.name === 'location' || event.name === 'stationary') {\n     *          var xhr = new XMLHttpRequest();\n     *          xhr.open('POST', 'http://192.168.81.14:3000/headless');\n     *          xhr.setRequestHeader('Content-Type', 'application/json');\n     *          xhr.send(JSON.stringify(event.params));\n     *      }\n     *\n     *      return 'Processing event: ' + event.name; // will be logged\n     *  });\n     * @param func\n     */\n    headlessTask(func: any): Promise<any>;\n    /**\n     * Force sync of pending locations.\n     * Option <code>syncThreshold</code> will be ignored and all pending locations will be immediately posted to <code>syncUrl</code> in single batch.\n     *\n     * Platform: Android, iOS\n     */\n    forceSync(): Promise<any>;\n    /**\n     * Register event listener.\n     *\n     * Triggered when server responded with \"<code>285 Updates Not Required</code>\" to post/sync request.\n     * @param event\n     * @param callbackFn\n     */\n    on(event: BackgroundGeolocationEvents): Observable<BackgroundGeolocationResponse>;\n    /**\n     * Unregister all event listeners for given event.\n     *\n     * If parameter <code>event</code> is not provided then all event listeners will be removed.\n     */\n    removeAllListeners(event?: BackgroundGeolocationEvents): Promise<any>;\n}\n"]}